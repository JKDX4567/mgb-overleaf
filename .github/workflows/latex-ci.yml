name: LaTeX build (fast)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ghcr.io/xu-cheng/texlive-full:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Create version.tex so \VERSION is not "Version DEV"
      - name: Write version.tex
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          DATE=$(date -u +"%Y-%m-%d")
          echo "\newcommand{\VERSION}{Version ${DATE} (${SHORT_SHA})}" > version.tex
          echo "Wrote version.tex:"
          cat version.tex

      # Minted requires pygments
      - name: Install pygments
        run: |
          apk update
          apk add --no-cache python3 py3-pip py3-pygments

      # (Optional) start fresh to avoid stale .toc/.aux confusion
      - name: Clean LaTeX aux files
        run: |
          latexmk -C || true
          rm -rf _*.minted* || true

      # Compile; latexmk will rerun as needed for ToC/refs
      - name: Compile with latexmk
        id: compile
        continue-on-error: true
        run: |
          set -x
          latexmk -pdf -interaction=nonstopmode -file-line-error --shell-escape itManual.tex || true

      # Helpful diagnostics: show first LaTeX error (binary logs safe)
      - name: Show first LaTeX error
        if: always()
        run: |
          echo "---- Searching for first LaTeX error in itManual.log ----"
          if [ -f itManual.log ]; then
            LINE=$(grep -n -a -E '^(!|.*LaTeX Error:)' itManual.log | head -1 | cut -d: -f1 || true)
            if [ -n "$LINE" ]; then
              START=$((LINE>20 ? LINE-20 : 1))
              END=$((LINE+40))
              sed -n "${START},${END}p" itManual.log
            else
              echo "No obvious error lines; showing last 200 lines:"
              tail -n 200 itManual.log
            fi
          else
            echo "itManual.log not found."
          fi

      # Upload outputs no matter what so you can inspect locally
      - name: Upload PDF
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: itManual-pdf
          path: itManual.pdf
          if-no-files-found: warn
          retention-days: 14

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latex-logs
          path: |
            itManual.log
            itManual.fls
            itManual.fdb_latexmk
            *.aux
            *.toc
            *.lof
            *.lot
            _*.minted*
          if-no-files-found: warn
          retention-days: 14
